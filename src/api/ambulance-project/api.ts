/* tslint:disable */
/* eslint-disable */
/**
 * Meal Orders API
 * Meal Orders management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: <your_email>
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface MealOrder
 */
export interface MealOrder {
    /**
     * Unique ID of the meal order
     * @type {string}
     * @memberof MealOrder
     */
    'id': string;
    /**
     * Name of the person ordering the meal
     * @type {string}
     * @memberof MealOrder
     */
    'name': string;
    /**
     * Dietary requirements of the person
     * @type {string}
     * @memberof MealOrder
     */
    'dietaryReq': string;
    /**
     * Medical needs related to the meal order
     * @type {string}
     * @memberof MealOrder
     */
    'medicalNeed': string;
    /**
     * Time when the meal is to be consumed
     * @type {string}
     * @memberof MealOrder
     */
    'consumationTime': string;
}

/**
 * MealOrdersApi - axios parameter creator
 * @export
 */
export const MealOrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to create a new meal order
         * @summary Creates a new meal order
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {MealOrder} mealOrder Meal order to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMealOrder: async (ambulanceId: string, mealOrder: MealOrder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('createMealOrder', 'ambulanceId', ambulanceId)
            // verify required parameter 'mealOrder' is not null or undefined
            assertParamExists('createMealOrder', 'mealOrder', mealOrder)
            const localVarPath = `/meal-orders/{ambulanceId}/records`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mealOrder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete a specific meal order
         * @summary Deletes a specific meal order
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} orderId ID of the meal order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMealOrder: async (ambulanceId: string, orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('deleteMealOrder', 'ambulanceId', ambulanceId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('deleteMealOrder', 'orderId', orderId)
            const localVarPath = `/meal-orders/{ambulanceId}/records/{orderId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details of a specific meal order by its ID
         * @summary Provides details about a specific meal order
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} orderId ID of the meal order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealOrder: async (ambulanceId: string, orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getMealOrder', 'ambulanceId', ambulanceId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getMealOrder', 'orderId', orderId)
            const localVarPath = `/meal-orders/{ambulanceId}/records/{orderId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all meal orders
         * @summary Provides the list of meal orders
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealOrders: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getMealOrders', 'ambulanceId', ambulanceId)
            const localVarPath = `/meal-orders/{ambulanceId}/records`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to update the content of a specific meal order
         * @summary Updates a specific meal order
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} orderId ID of the meal order
         * @param {MealOrder} mealOrder Meal order to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMealOrder: async (ambulanceId: string, orderId: string, mealOrder: MealOrder, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('updateMealOrder', 'ambulanceId', ambulanceId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('updateMealOrder', 'orderId', orderId)
            // verify required parameter 'mealOrder' is not null or undefined
            assertParamExists('updateMealOrder', 'mealOrder', mealOrder)
            const localVarPath = `/meal-orders/{ambulanceId}/records/{orderId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mealOrder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MealOrdersApi - functional programming interface
 * @export
 */
export const MealOrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MealOrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to create a new meal order
         * @summary Creates a new meal order
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {MealOrder} mealOrder Meal order to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMealOrder(ambulanceId: string, mealOrder: MealOrder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MealOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMealOrder(ambulanceId, mealOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to delete a specific meal order
         * @summary Deletes a specific meal order
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} orderId ID of the meal order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMealOrder(ambulanceId: string, orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMealOrder(ambulanceId, orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details of a specific meal order by its ID
         * @summary Provides details about a specific meal order
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} orderId ID of the meal order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMealOrder(ambulanceId: string, orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MealOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMealOrder(ambulanceId, orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of all meal orders
         * @summary Provides the list of meal orders
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMealOrders(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MealOrder>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMealOrders(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to update the content of a specific meal order
         * @summary Updates a specific meal order
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} orderId ID of the meal order
         * @param {MealOrder} mealOrder Meal order to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMealOrder(ambulanceId: string, orderId: string, mealOrder: MealOrder, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MealOrder>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMealOrder(ambulanceId, orderId, mealOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MealOrdersApi - factory interface
 * @export
 */
export const MealOrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MealOrdersApiFp(configuration)
    return {
        /**
         * Use this method to create a new meal order
         * @summary Creates a new meal order
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {MealOrder} mealOrder Meal order to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMealOrder(ambulanceId: string, mealOrder: MealOrder, options?: any): AxiosPromise<MealOrder> {
            return localVarFp.createMealOrder(ambulanceId, mealOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete a specific meal order
         * @summary Deletes a specific meal order
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} orderId ID of the meal order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMealOrder(ambulanceId: string, orderId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMealOrder(ambulanceId, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details of a specific meal order by its ID
         * @summary Provides details about a specific meal order
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} orderId ID of the meal order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealOrder(ambulanceId: string, orderId: string, options?: any): AxiosPromise<MealOrder> {
            return localVarFp.getMealOrder(ambulanceId, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all meal orders
         * @summary Provides the list of meal orders
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMealOrders(ambulanceId: string, options?: any): AxiosPromise<Array<MealOrder>> {
            return localVarFp.getMealOrders(ambulanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to update the content of a specific meal order
         * @summary Updates a specific meal order
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {string} orderId ID of the meal order
         * @param {MealOrder} mealOrder Meal order to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMealOrder(ambulanceId: string, orderId: string, mealOrder: MealOrder, options?: any): AxiosPromise<MealOrder> {
            return localVarFp.updateMealOrder(ambulanceId, orderId, mealOrder, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MealOrdersApi - interface
 * @export
 * @interface MealOrdersApi
 */
export interface MealOrdersApiInterface {
    /**
     * Use this method to create a new meal order
     * @summary Creates a new meal order
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {MealOrder} mealOrder Meal order to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealOrdersApiInterface
     */
    createMealOrder(ambulanceId: string, mealOrder: MealOrder, options?: AxiosRequestConfig): AxiosPromise<MealOrder>;

    /**
     * Use this method to delete a specific meal order
     * @summary Deletes a specific meal order
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} orderId ID of the meal order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealOrdersApiInterface
     */
    deleteMealOrder(ambulanceId: string, orderId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get details of a specific meal order by its ID
     * @summary Provides details about a specific meal order
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} orderId ID of the meal order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealOrdersApiInterface
     */
    getMealOrder(ambulanceId: string, orderId: string, options?: AxiosRequestConfig): AxiosPromise<MealOrder>;

    /**
     * Get a list of all meal orders
     * @summary Provides the list of meal orders
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealOrdersApiInterface
     */
    getMealOrders(ambulanceId: string, options?: AxiosRequestConfig): AxiosPromise<Array<MealOrder>>;

    /**
     * Use this method to update the content of a specific meal order
     * @summary Updates a specific meal order
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} orderId ID of the meal order
     * @param {MealOrder} mealOrder Meal order to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealOrdersApiInterface
     */
    updateMealOrder(ambulanceId: string, orderId: string, mealOrder: MealOrder, options?: AxiosRequestConfig): AxiosPromise<MealOrder>;

}

/**
 * MealOrdersApi - object-oriented interface
 * @export
 * @class MealOrdersApi
 * @extends {BaseAPI}
 */
export class MealOrdersApi extends BaseAPI implements MealOrdersApiInterface {
    /**
     * Use this method to create a new meal order
     * @summary Creates a new meal order
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {MealOrder} mealOrder Meal order to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealOrdersApi
     */
    public createMealOrder(ambulanceId: string, mealOrder: MealOrder, options?: AxiosRequestConfig) {
        return MealOrdersApiFp(this.configuration).createMealOrder(ambulanceId, mealOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete a specific meal order
     * @summary Deletes a specific meal order
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} orderId ID of the meal order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealOrdersApi
     */
    public deleteMealOrder(ambulanceId: string, orderId: string, options?: AxiosRequestConfig) {
        return MealOrdersApiFp(this.configuration).deleteMealOrder(ambulanceId, orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details of a specific meal order by its ID
     * @summary Provides details about a specific meal order
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} orderId ID of the meal order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealOrdersApi
     */
    public getMealOrder(ambulanceId: string, orderId: string, options?: AxiosRequestConfig) {
        return MealOrdersApiFp(this.configuration).getMealOrder(ambulanceId, orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all meal orders
     * @summary Provides the list of meal orders
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealOrdersApi
     */
    public getMealOrders(ambulanceId: string, options?: AxiosRequestConfig) {
        return MealOrdersApiFp(this.configuration).getMealOrders(ambulanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to update the content of a specific meal order
     * @summary Updates a specific meal order
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {string} orderId ID of the meal order
     * @param {MealOrder} mealOrder Meal order to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MealOrdersApi
     */
    public updateMealOrder(ambulanceId: string, orderId: string, mealOrder: MealOrder, options?: AxiosRequestConfig) {
        return MealOrdersApiFp(this.configuration).updateMealOrder(ambulanceId, orderId, mealOrder, options).then((request) => request(this.axios, this.basePath));
    }
}


