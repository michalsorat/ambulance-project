/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AmbulanceApp {
        "ambulanceId": string;
        "apiBase": string;
        "basePath": string;
    }
    interface AmbulanceRecordDetail {
        "ambulanceId": string;
        "apiBase": string;
        "entryId": string;
        "order": any;
    }
    interface AmbulanceRecordList {
        "ambulanceId": string;
        "apiBase": string;
    }
}
export interface AmbulanceRecordDetailCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmbulanceRecordDetailElement;
}
export interface AmbulanceRecordListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAmbulanceRecordListElement;
}
declare global {
    interface HTMLAmbulanceAppElement extends Components.AmbulanceApp, HTMLStencilElement {
    }
    var HTMLAmbulanceAppElement: {
        prototype: HTMLAmbulanceAppElement;
        new (): HTMLAmbulanceAppElement;
    };
    interface HTMLAmbulanceRecordDetailElementEventMap {
        "editor-closed": string;
    }
    interface HTMLAmbulanceRecordDetailElement extends Components.AmbulanceRecordDetail, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmbulanceRecordDetailElementEventMap>(type: K, listener: (this: HTMLAmbulanceRecordDetailElement, ev: AmbulanceRecordDetailCustomEvent<HTMLAmbulanceRecordDetailElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmbulanceRecordDetailElementEventMap>(type: K, listener: (this: HTMLAmbulanceRecordDetailElement, ev: AmbulanceRecordDetailCustomEvent<HTMLAmbulanceRecordDetailElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmbulanceRecordDetailElement: {
        prototype: HTMLAmbulanceRecordDetailElement;
        new (): HTMLAmbulanceRecordDetailElement;
    };
    interface HTMLAmbulanceRecordListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLAmbulanceRecordListElement extends Components.AmbulanceRecordList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAmbulanceRecordListElementEventMap>(type: K, listener: (this: HTMLAmbulanceRecordListElement, ev: AmbulanceRecordListCustomEvent<HTMLAmbulanceRecordListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAmbulanceRecordListElementEventMap>(type: K, listener: (this: HTMLAmbulanceRecordListElement, ev: AmbulanceRecordListCustomEvent<HTMLAmbulanceRecordListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAmbulanceRecordListElement: {
        prototype: HTMLAmbulanceRecordListElement;
        new (): HTMLAmbulanceRecordListElement;
    };
    interface HTMLElementTagNameMap {
        "ambulance-app": HTMLAmbulanceAppElement;
        "ambulance-record-detail": HTMLAmbulanceRecordDetailElement;
        "ambulance-record-list": HTMLAmbulanceRecordListElement;
    }
}
declare namespace LocalJSX {
    interface AmbulanceApp {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "basePath"?: string;
    }
    interface AmbulanceRecordDetail {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "entryId"?: string;
        "onEditor-closed"?: (event: AmbulanceRecordDetailCustomEvent<string>) => void;
        "order"?: any;
    }
    interface AmbulanceRecordList {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "onEntry-clicked"?: (event: AmbulanceRecordListCustomEvent<string>) => void;
    }
    interface IntrinsicElements {
        "ambulance-app": AmbulanceApp;
        "ambulance-record-detail": AmbulanceRecordDetail;
        "ambulance-record-list": AmbulanceRecordList;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ambulance-app": LocalJSX.AmbulanceApp & JSXBase.HTMLAttributes<HTMLAmbulanceAppElement>;
            "ambulance-record-detail": LocalJSX.AmbulanceRecordDetail & JSXBase.HTMLAttributes<HTMLAmbulanceRecordDetailElement>;
            "ambulance-record-list": LocalJSX.AmbulanceRecordList & JSXBase.HTMLAttributes<HTMLAmbulanceRecordListElement>;
        }
    }
}
